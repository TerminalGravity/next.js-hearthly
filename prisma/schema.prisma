generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MEMBER
}

enum RsvpStatus {
  YES
  NO
  MAYBE
}

enum SubscriptionType {
  FREE
  PREMIUM
  ENTERPRISE
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  CANCELLED
}

model User {
  id              String            @id @default(cuid())
  name            String
  email           String            @unique
  hashedPassword  String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  familyMembers   FamilyMember[]
  rsvps           Rsvp[]
  photos          Photo[]
  subscriptions   Subscription[]
  purchaseHistory PurchaseHistory[]
  adminOfFamilies Family[]         @relation("FamilyAdmin")
  comments        Comment[]

  @@index([email])
}

model Family {
  id            String         @id @default(cuid())
  familyName    String
  adminUserId   String
  adminUser     User          @relation("FamilyAdmin", fields: [adminUserId], references: [id])
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  members       FamilyMember[]
  events        Event[]
  photos        Photo[]
  subscriptions Subscription[]

  @@index([adminUserId])
}

model FamilyMember {
  id        String   @id @default(cuid())
  familyId  String
  userId    String
  role      Role     @default(MEMBER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  family    Family   @relation(fields: [familyId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([familyId, userId])
  @@index([familyId])
  @@index([userId])
}

model Event {
  id          String   @id @default(cuid())
  familyId    String
  title       String
  host        String
  date        DateTime
  time        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  family      Family   @relation(fields: [familyId], references: [id])
  rsvps       Rsvp[]
  photos      Photo[]
  comments    Comment[]

  @@index([familyId])
  @@index([date])
}

model Rsvp {
  id        String     @id @default(cuid())
  eventId   String
  userId    String
  status    RsvpStatus
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  event     Event      @relation(fields: [eventId], references: [id])
  user      User       @relation(fields: [userId], references: [id])

  @@unique([eventId, userId])
  @@index([eventId])
  @@index([userId])
}

model Recipe {
  id            String          @id @default(cuid())
  name          String
  tags          String[]
  description   String
  link          String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  affiliateLinks AffiliateLink[] @relation("RecipeAffiliateLink")

  @@index([name])
  @@index([tags])
}

model Game {
  id            String          @id @default(cuid())
  name          String
  category      String
  description   String
  link          String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  affiliateLinks AffiliateLink[] @relation("GameAffiliateLink")

  @@index([name])
  @@index([category])
}

model Photo {
  id        String   @id @default(cuid())
  eventId   String?
  familyId  String
  userId    String
  fileUrl   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  event     Event?   @relation(fields: [eventId], references: [id])
  family    Family   @relation(fields: [familyId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@index([eventId])
  @@index([familyId])
  @@index([userId])
}

model Subscription {
  id               String             @id @default(cuid())
  userId           String
  familyId         String
  subscriptionType SubscriptionType
  status           SubscriptionStatus
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  user             User               @relation(fields: [userId], references: [id])
  family           Family             @relation(fields: [familyId], references: [id])

  @@index([userId])
  @@index([familyId])
  @@index([status])
}

model AffiliateLink {
  id          String   @id @default(cuid())
  itemType    String
  itemId      String
  affiliateUrl String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  recipe      Recipe?  @relation("RecipeAffiliateLink", fields: [itemId], references: [id], onDelete: Cascade, map: "AffiliateLink_recipe_fkey")
  game        Game?    @relation("GameAffiliateLink", fields: [itemId], references: [id], onDelete: Cascade, map: "AffiliateLink_game_fkey")

  @@index([itemType, itemId])
}

model PurchaseHistory {
  id        String   @id @default(cuid())
  userId    String
  itemType  String
  itemId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([itemType, itemId])
}

model Invitation {
  id        String   @id @default(cuid())
  familyId  String
  email     String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  family    Family   @relation(fields: [familyId], references: [id])

  @@unique([familyId, email])
  @@index([token])
  @@index([familyId])
  @@index([email])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  eventId   String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  event     Event    @relation(fields: [eventId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@index([eventId])
  @@index([userId])
}
